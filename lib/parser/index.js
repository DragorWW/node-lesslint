/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[1,11],$V3=[1,12],$V4=[1,17],$V5=[1,19],$V6=[7,9,11,13,16],$V7=[1,22],$V8=[9,19],$V9=[5,9,11,13,16],$Va=[7,9,11,21,22];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"lines":4,"EOF":5,"line":6,"N":7,"selector":8,"S":9,"prop_value":10,"BRACE_END":11,"tag_selector":12,"IDENT":13,"BRACE_BEGIN":14,"prop":15,"PROPERTY":16,"value":17,"VALUE":18,"COLON":19,"semicolon_or_empty":20,"SEMICOLON":21,"{\n":22,"debug(":23,",":24,"empty":25,");\n":26,"}\n":27,"//":28,"|":29,"S\n":30,";\n\n//":31,"N*\n//":32,"n_or_empty\n//":33,":":34,"N\n//":35,"{\n//":36,"n_or_empty":37,");\n//":38,"}\n//":39,"empty\n//":40,"S*\n//":41,"s_or_empty\n//":42,"S\n//":43,"s_or_empty":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"N",9:"S",11:"BRACE_END",13:"IDENT",14:"BRACE_BEGIN",16:"PROPERTY",18:"VALUE",19:"COLON",21:"SEMICOLON",22:"{\n",23:"debug(",24:",",25:"empty",26:");\n",27:"}\n",28:"//",29:"|",30:"S\n",31:";\n\n//",32:"N*\n//",33:"n_or_empty\n//",34:":",35:"N\n//",36:"{\n//",37:"n_or_empty",38:");\n//",39:"}\n//",40:"empty\n//",41:"S*\n//",42:"s_or_empty\n//",43:"S\n//",44:"s_or_empty"},
productions_: [0,[3,2],[3,1],[4,2],[4,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,1],[6,2],[6,2],[6,3],[12,2],[12,3],[8,1],[15,1],[15,2],[15,2],[17,1],[17,2],[17,2],[10,4],[10,4],[20,1],[20,1],[20,240]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            ast.imports = yy.imports;
            ast.charsets = yy.charsets;
            return {
                root: ast
            };
        
break;
case 2:

            ast.imports = yy.imports || [];
            ast.charsets = yy.charsets || [];
            return {
                root: ast
            };
        
break;
case 3:

            debug('lines', 'line N');
        
break;
case 4:

            debug('lines', 'lines line N');
        
break;
case 5:

            this.$ = $$[$0];

            if (!curSelector) {
                ast.selectors.push(this.$);
            }
            else {
                if (!curSelector.isEnd) {
                    this.$.parent = curSelector;
                    curSelector.children.push(this.$);
                }
            }
            curSelector = this.$;

            debug('line', 'selector');
        
break;
case 6:

            this.$ = $$[$0];

            if (!curSelector) {
                ast.selectors.push(this.$);
            }
            else {
                if (!curSelector.isEnd) {
                    this.$.parent = curSelector;
                    curSelector.children.push(this.$);
                }
            }
            curSelector = this.$;
            debug('line', 'line selector');
        
break;
case 7:

            $$[$0].before = $$[$0-1];
            this.$ = $$[$0];

            if (!curSelector) {
                ast.selectors.push(this.$);
            }
            else {
                if (!curSelector.isEnd) {
                    this.$.parent = curSelector;
                    curSelector.children.push(this.$);
                }
            }
            curSelector = this.$;
            debug('line', 'S selector');
        
break;
case 8:

            debug('line', 'line S selector');
        
break;
case 9:

            this.$ = $$[$0];
            debug('line', 'prop_value');
        
break;
case 10:

            this.$ = $$[$0];
            debug('line', 'line prop_value');
        
break;
case 11:

            if (curSelector) {
                curSelector.isEnd = true;
                // curSelector.parent 如果是 null，那么 curSelector 就是 null
                curSelector = curSelector.parent;
            }
            debug('line', 'BRACE_END');
        
break;
case 12:

            if (curSelector) {
                curSelector.isEnd = true;
                // curSelector.parent 如果是 null，那么 curSelector 就是 null
                curSelector = curSelector.parent;
            }
            debug('line', 'line BRACE_END');
        
break;
case 13:

            if (curSelector) {
                curSelector.isEnd = true;
                // curSelector.parent 如果是 null，那么 curSelector 就是 null
                curSelector = curSelector.parent;
            }
            debug('line', 'S BRACE_END');
        
break;
case 14:

            if (curSelector) {
                curSelector.isEnd = true;
                // curSelector.parent 如果是 null，那么 curSelector 就是 null
                curSelector = curSelector.parent;
            }
            debug('line', 'line S BRACE_END');
        
break;
case 15:

            this.$ = {
                type: 'selector',
                value: $$[$0-1],
                before: '',
                after: '',
                parent: null,
                isEnd: false,   // 选择器是否结束即是否遇到了 BRACE_END 符号，用于确定下一个选择器是子选择器还是兄弟选择器
                loc: {
                    firstLine: _$[$0-1].first_line,
                    lastLine: _$[$0-1].last_line,
                    firstCol: _$[$0-1].first_column + 1,
                    lastCol: _$[$0-1].last_column + 1
                },
                props: [],
                children: []
            };
            debug('tag_selector', 'IDENT BRACE_BEGIN');
        
break;
case 16:

            this.$ = {
                type: 'selector',
                value: $$[$0-2],
                before: '',
                after: $$[$0-1],
                parent: null,
                isEnd: false,   // 选择器是否结束即是否遇到了 BRACE_END 符号，用于确定下一个选择器是子选择器还是兄弟选择器
                loc: {
                    firstLine: _$[$0-2].first_line,
                    lastLine: _$[$0-2].last_line,
                    firstCol: _$[$0-2].first_column + 1,
                    lastCol: _$[$0-2].last_column + 1
                },
                props: [],
                children: []
            };
            debug('tag_selector', 'IDENT S BRACE_BEGIN');
        
break;
case 17:

            debug('selector', 'tag_selector');
        
break;
case 18:

            this.$ = {
                val: $$[$0],
                before: '',
                after: ''
            };
            debug('prop', 'PROPERTY');
        
break;
case 19:

            this.$ = {
                val: $$[$0],
                before: $$[$0-1],
                after: ''
            };
            debug('prop', 'S PROPERTY');
        
break;
case 20:

            $$[$0-1].after = $$[$0];
            this.$ = $$[$0-1];
            debug('prop', 'prop S');
        
break;
case 21:

            this.$ = {
                val: $$[$0],
                before: '',
                after: ''
            };
            debug('value', 'VALUE');
        
break;
case 22:

            this.$ = {
                val: $$[$0],
                before: $$[$0-1],
                after: ''
            };
            debug('value', 'S VALUE');
        
break;
case 23:

            $$[$0-1].after = $$[$0];
            this.$ = $$[$0-1];
            debug('value', 'value S');
        
break;
case 24:

            curSelector.props.push({
                type: 'prop',
                prop: $$[$0-3].val,
                beforeProp: $$[$0-3].before,
                afterProp: $$[$0-3].after,
                value: $$[$0-1].val,
                beforeValue: $$[$0-1].before,
                afterValue: $$[$0-1].after,
                loc: {
                    firstLine: _$[$0-3].first_line,
                    lastLine: _$[$0-3].last_line,
                    firstCol: _$[$0-3].first_column + 1,
                    lastCol: _$[$0-3].last_column + 1
                }
            });

            debug('prop_value', 'prop COLON value semicolon_or_empty');
        
break;
case 25:

            curSelector.props.push({
                type: 'prop',
                prop: $$[$0-3].val,
                beforeProp: $$[$0-3].before,
                afterProp: $$[$0-3].after,
                value: $$[$0-1].val,
                beforeValue: $$[$0-1].before,
                afterValue: $$[$0-1].after,
                loc: {
                    firstLine: _$[$0-3].first_line,
                    lastLine: _$[$0-3].last_line,
                    firstCol: _$[$0-3].first_column + 1,
                    lastCol: _$[$0-3].last_column + 1
                }
            });
            curSelector.isEnd = true;
            curSelector = curSelector.parent;
            debug('prop_value', 'prop COLON value BRACE_END');
        
break;
case 26:

            debug('semicolon_or_empty', 'SEMICOLON');
        
break;
case 27:

            debug('semicolon_or_empty', 'N');
        
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,8:5,9:$V0,10:7,11:$V1,12:9,13:$V2,15:10,16:$V3},{1:[3]},{5:[1,13],6:14,8:5,9:$V0,10:7,11:$V1,12:9,13:$V2,15:10,16:$V3},{1:[2,2]},{7:[1,15],8:16,9:$V4,10:18,11:$V5,12:9,13:$V2,15:10,16:$V3},o($V6,[2,5]),{8:20,11:[1,21],12:9,13:$V2,16:$V7},o($V6,[2,9]),o($V6,[2,11]),o($V6,[2,17]),{9:[1,24],19:[1,23]},{9:[1,26],14:[1,25]},o($V8,[2,18]),{1:[2,1]},{7:[1,27],8:16,9:$V4,10:18,11:$V5,12:9,13:$V2,15:10,16:$V3},o($V9,[2,3]),o($V6,[2,6]),{8:28,11:[1,29],12:9,13:$V2,16:$V7},o($V6,[2,10]),o($V6,[2,12]),o($V6,[2,7]),o($V6,[2,13]),o($V8,[2,19]),{9:[1,32],17:30,18:[1,31]},o($V8,[2,20]),o($V6,[2,15]),{14:[1,33]},o($V9,[2,4]),o($V6,[2,8]),o($V6,[2,14]),{7:[1,38],9:[1,36],11:[1,35],20:34,21:[1,37],22:[1,39]},o($Va,[2,21]),{18:[1,40]},o($V6,[2,16]),o($V6,[2,24]),o($V6,[2,25]),o($Va,[2,23]),o($V6,[2,26]),o($V6,[2,27]),o($V6,[2,28]),o($Va,[2,22])],
defaultActions: {3:[2,2],13:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var chalk = require('chalk');
    var safeStringify = require('json-stringify-safe');

    var variables = [];
    var ast = {
        variables: [],
        imports: [],
        selectors: []
    };

    var curSelector = null;

    var isDebug = true;
    function debug() {
        if (isDebug) {
            var args = [].slice.call(arguments);
            var len = args.length;
            if (len === 1) {
                console.warn(args[0]);
            }
            else {
                var msg = [];
                while (len) {
                    msg.push(args[args.length - len--]);
                }

                var first = msg.splice(0, 1);
                console.warn(chalk.yellow(first) + ': ' + chalk.cyan(msg.join(' ')));
                console.warn();
            }
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"backtrack_lexer":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    yy.a = 'aaa';

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
        // console.warn(yy_.yytext, 123123);
        this.begin('sc');
    
break;
case 1:
        // console.warn(yy_.yytext, 'mc-start');
        this.begin('mc');
    
break;
case 2:
        this.popState();
    
break;
case 3:
        this.popState();
    
break;
case 4:
        this.begin('im');
    
break;
case 5:
        /(['"])([\s\S]*)\1/.test(yy_.yytext);
        var content = RegExp.$2;
        var quote = RegExp.$1;

        /^(\s*)/.test(yy_.yytext);
        var before = RegExp.$1;

        /(\s*)$/.test(yy_.yytext);
        var after = RegExp.$1;

        if (!yy.imports) {
            yy.imports = [];
        }

        // 这里把 @import (less) 'aaa'; 里面的 (less) 暂时省略了
        yy.imports.push({
            type: 'import',
            content: content,
            quote: quote,
            before: before,
            after: after,
            loc: {
                firstLine: yy_.yylloc.first_line,
                lastLine: yy_.yylloc.last_line,
                firstCol: yy_.yylloc.first_column + 1,
                lastCol: yy_.yylloc.last_column + 1
            }
        });
    
break;
case 6:
        this.popState();
    
break;
case 7:
        this.begin('ch');
    
break;
case 8:
        /(['"])([\s\S]*)\1/.test(yy_.yytext);
        var content = RegExp.$2;
        var quote = RegExp.$1;

        /^(\s*)/.test(yy_.yytext);
        var before = RegExp.$1;

        /(\s*)$/.test(yy_.yytext);
        var after = RegExp.$1;

        if (!yy.charsets) {
            yy.charsets = [];
        }

        // 这里把 @import (less) 'aaa'; 里面的 (less) 暂时省略了
        yy.charsets.push({
            type: 'charset',
            content: content,
            quote: quote,
            before: before,
            after: after,
            loc: {
                firstLine: yy_.yylloc.first_line,
                lastLine: yy_.yylloc.last_line,
                firstCol: yy_.yylloc.first_column + 1,
                lastCol: yy_.yylloc.last_column + 1
            }
        });
    
break;
case 9:
        this.popState();
    
break;
case 10:
        // console.log(this, '11');
        return 7;
    
break;
case 11:
        // console.log(this, '11');
        return 9;
    
break;
case 12:
        return 19;
    
break;
case 13:
        return 21;
    
break;
case 14:
        if (this.topState() === 'b') {
            this.begin('sb');
        }
        else {
            this.begin('b');
        }
        // console.warn(this.topState(), 'rrr');
        return 14;
    
break;
case 15:
        // if (this.topState() === 'sb') {
        //     this.begin('b');
        // }
        // else {
            this.popState();
        // }
        return 11;
    
break;
case 16:
        // console.log(yy_.yytext, this.topState(), 'p');
        this.begin('p');
        // console.log(yy_.yytext, this.topState(), 'p');
        return 16;
    
break;
case 17:
        // console.warn(yy_.yytext);
        this.popState();
        // console.log(yy_.yytext + '--', this.topState(), 'sss');
        return 18;
    
break;
case 18:
        // console.warn(yy_.yytext);
        this.popState();
        // console.log(yy_.yytext + '--', this.topState(), 'sss');
        return 18;
    
break;
case 19:
        return 13;
    
break;
case 20:
        return 5;
    
break;
case 21:
        this.popState();
        return 5;
    
break;
case 22:
        this.begin('s');
    
break;
}
},
rules: [/^(?:(^(\/\/.*)))/,/^(?:(^(\/\*)))/,/^(?:(([^\][^*]*\*+)*\/\n*))/,/^(?:(\n+))/,/^(?:(^\s*@import\b))/,/^(?:[^;]+)/,/^(?:(;+)\n*)/,/^(?:(^\s*@charset\b))/,/^(?:[^;]+)/,/^(?:(;+)\n*)/,/^(?:(\n+))/,/^(?:([ \t\s]+))/,/^(?:(:+))/,/^(?:(;+))/,/^(?:\{)/,/^(?:\})/,/^(?:([\-]?([_a-zA-Z]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*)(?=(\s*(:+))))/,/^(?:([\-]?([_a-zA-Z]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*)\s+([\-]?([_a-zA-Z]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*))/,/^(?:([\-]?([_a-zA-Z]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*))/,/^(?:([\-]?([_a-zA-Z]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))([_a-zA-Z0-9\-]|([\240-\377])|((\\{h}{1,6}(\r\n|[ \t\r\n\f])?)|\\[^\r\n\f0-9a-fA-F]))*))/,/^(?:$)/,/^(?:$)/,/^(?:)/],
conditions: {"s":{"rules":[0,1,4,7,10,11,12,13,14,19,21],"inclusive":false},"sc":{"rules":[3,21],"inclusive":false},"mc":{"rules":[2,21],"inclusive":false},"b":{"rules":[10,11,12,13,14,15,16,19],"inclusive":false},"sb":{"rules":[10,11,12,13,14,15,16,19],"inclusive":false},"p":{"rules":[10,11,12,13,17,18],"inclusive":false},"im":{"rules":[5,6],"inclusive":false},"ch":{"rules":[8,9],"inclusive":false},"INITIAL":{"rules":[20,22],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}